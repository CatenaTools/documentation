{
  "openapi": "3.0.1",
  "info": {
    "title": "catena-tools-core",
    "version": "v1"
  },
  "paths": {
    "/api/v1/accounts": {
      "post": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "CreateOrGetAccountFromToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.CreateOrGetAccountFromTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.CreateOrGetAccountFromTokenResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}": {
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "GetAccountByID Retrieves information about the account given an id. This route is to be used by users",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.GetAccountByIdResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "UpdateAccount Updates a passed in account's display_name and metadata",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the account to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateAccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/accounts/{accountId}": {
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "AdminGetAccountById is to be used by admins to retrieve detailed account information",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.GetAccountByIdResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/link": {
      "post": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "LinkAccountToProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.LinkAccountToProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.LinkAccountToProviderResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/metadata": {
      "post": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "CreateMetadataEntry Creates a metadata entry for an account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.CreateMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.CreateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "UpdateMetadataEntry Updates a passed in account's metadata for a specific entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "GetMetadataEntries Gets all metadata entries for a passed in account id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.GetMetadataEntriesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/metadata/{entryKey}": {
      "delete": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "DeleteMetadataEntry Deletes a metadata entry for an account",
        "parameters": [
          {
            "name": "entryKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jsonHandlingType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Catena.Groups.DeleteJsonMetadataType"
            }
          },
          {
            "name": "propertiesToRemovePaths",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.DeleteMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "GetMetadataEntry Gets a metadata entry for a passed in key",
        "parameters": [
          {
            "name": "entryKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.GetMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/healthz": {
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "summary": "GetServiceHealth Gets the health of the CatenaAccounts service, logging any errors",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Core.GetServiceHealthResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/accounts": {
      "post": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.CreateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.CreateAccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.DeleteAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.DeleteAccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/accounts/metadata": {
      "post": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.CreateMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.CreateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.UpdateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.DeleteMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.DeleteMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaAccounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAccounts.GetMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAccounts.GetMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authentication/login": {
      "post": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "LoginWithProvider Logs in a user with the given provider.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAuthentication.LoginWithProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.LoginWithProviderResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authentication/providers": {
      "get": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "GetEnabledProviders returns a list of all active OAuth providers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.GetEnabledProvidersResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/authentication/providers/{provider}": {
      "patch": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "AdminUpdateProviderConfig allows an admin to update the configuration of a specific provider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Services.PublicCommon.Provider"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAuthentication.AdminAddOrUpdateProviderConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.AdminAddOrUpdateProviderConfigResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaAuthentication"
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Services.PublicCommon.Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.AdminGetProviderConfigResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/authentication/providers/{provider}/status": {
      "put": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "AdminToggleProvider allows an admin to enable/disable a specific OAuth2 provider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Services.PublicCommon.Provider"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaAuthentication.AdminToggleProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.AdminToggleProviderResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authentication/await": {
      "get": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "AwaitSession will send a message if the user successfully logs in or fails to log in after a timeout.\r\nIn this flow you will log in & go through the oauth flow, then wait for the callback to be called.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.AwaitSessionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authentication/healthz": {
      "get": {
        "tags": [
          "CatenaAuthentication"
        ],
        "summary": "GetServiceHealth Gets the health of the CatenaAuthentication service, logging any errors",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Core.GetServiceHealthResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authentication/logout": {
      "post": {
        "tags": [
          "CatenaAuthentication"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaAuthentication.LogoutResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/entitlements": {
      "post": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "AdminCreateEntitlement Creates a new entitlement in our system with the specified information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminCreateEntitlementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminCreateEntitlementResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "AdminUpdtateEntitlement Updates the name, description, and/or the entitlement granting purchases of an existing entitlement.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminUpdateEntitlementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminUpdateEntitlementResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "AdminGetAllEntitlements Fetches all existing entitlements in our system.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminGetEntitlementsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/entitlements/{entitlementId}": {
      "delete": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "AdminDeleteEntitlement Deletes the specified entitlement from our system and revokes it from all users to whom it has previously been granted.",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminDeleteAndRevokeEntitlementResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/entitlements/{approxEntitlementName}": {
      "get": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "AdminGetEntitlementsByApproxName Fetches all entitlements whose name contains the specified keyword or a single entitlement if an exact name is provided. \r\nThis should only be called when an admin clicks a search button so we are not \r\nmaking a request with each character typed into a search bar.",
        "parameters": [
          {
            "name": "approxEntitlementName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.AdminGetEntitlementsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/entitlements/purchase": {
      "post": {
        "tags": [
          "CatenaEntitlements"
        ],
        "summary": "Allows an account to purchase a product from a supported IAP store.\r\nThis purchase can either be a one-time purchase that the account is billed for once\r\nor a subscription purchase that the account is billed for on a recurring basis.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaEntitlements.CreateIAPStorePurchaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaEntitlements.CreateIAPStorePurchaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matchmaking/start": {
      "post": {
        "tags": [
          "CatenaMatchmaking"
        ],
        "summary": "StartMatchmaking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaMatchmaking.StartMatchmakingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaMatchmaking.StartMatchmakingResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matchmaking/cancel": {
      "post": {
        "tags": [
          "CatenaMatchmaking"
        ],
        "summary": "CancelMatchmaking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaMatchmaking.CancelMatchmakingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaMatchmaking.CancelMatchmakingResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matchmaking/{ticketId}": {
      "get": {
        "tags": [
          "CatenaMatchmaking"
        ],
        "summary": "GetMatchmakingStatus",
        "parameters": [
          {
            "name": "ticketId",
            "in": "path",
            "description": "The ID of the ticket for which we are polling matchmaking status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaMatchmaking.GetMatchmakingStatusResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matchmaking/healthz": {
      "get": {
        "tags": [
          "CatenaMatchmaking"
        ],
        "summary": "GetServiceHealth",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Core.GetServiceHealthResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/create": {
      "post": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "CreateParty Creates a new party setting the player who requested its creation as its leader.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.CreatePartyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.CreatePartyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/update-player": {
      "patch": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "Note: Append operations are not currently supported when updating metadata with this method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.UpdatePartyPlayerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.UpdatePartyPlayerResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/join": {
      "post": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "JoinPartyWithInviteCode Allows a player to join a party by specifying its invite code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.JoinPartyWithInviteCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.JoinPartyWithInviteCodeResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties": {
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetPartyInfo Fetches party information for the party that the requesting player is currently a member of.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.GetPartyInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/{partyId}": {
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetPartyInfoByPartyId Fetches information for a party given a party ID.",
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.GetPartyInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/{playerId}": {
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetPlayerInfoById Fetches information for a player in a party given an ID.",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.GetPlayerInfoByIdResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/set-leader": {
      "put": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "SetPartyLeader Allows the current leader of a party to set a new leader.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.SetPartyLeaderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.SetPartyLeaderResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/kick": {
      "put": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "KickFromParty Allows the leader of a party to kick another player from their party.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.KickFromPartyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.KickFromPartyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/leave": {
      "put": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "LeaveParty Allows a player to leave their party and assigns a new leader if the leader leaves.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.LeavePartyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaParties.LeavePartyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/metadata": {
      "post": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "CreateMetadataEntry Creates a metadata entry for a party",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.CreatePartyMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Groups.CreateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "UpdateMetadataEntry Updates a passed in party's metadata for a specific entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaParties.UpdatePartyMetadataEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Groups.UpdateMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/metadata/{innerRequest.id}/{innerRequest.entryKey}": {
      "delete": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "DeleteMetadataEntry Deletes a metadata entry for a party",
        "parameters": [
          {
            "name": "innerRequest.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "innerRequest.entryKey",
            "in": "path",
            "description": "The key in the metadata whose entry needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "innerRequest.jsonHandlingType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Catena.Groups.DeleteJsonMetadataType"
            }
          },
          {
            "name": "innerRequest.propertiesToRemovePaths",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "playerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Groups.DeleteMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetMetadataEntry Gets a metadata entry for a passed in key",
        "parameters": [
          {
            "name": "innerRequest.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "innerRequest.entryKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Groups.GetMetadataEntryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/metadata/{innerRequest.id}": {
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetMetadataEntries Gets all metadata entries for a passed in party id",
        "parameters": [
          {
            "name": "innerRequest.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "playerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Groups.GetMetadataEntriesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parties/healthz": {
      "get": {
        "tags": [
          "CatenaParties"
        ],
        "summary": "GetServiceHealth",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Core.GetServiceHealthResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/capacity/allocate": {
      "post": {
        "tags": [
          "CatenaServerCapacity"
        ],
        "summary": "AllocateServerRequest asks the capacity service for the connection details to the next free server",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Catena.Capacity.AllocateServerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Capacity.AllocateServerResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/capacity/deallocate": {
      "post": {
        "tags": [
          "CatenaServerCapacity"
        ],
        "summary": "DeAllocateServerRequest asks the capacity service to free up the server for other use",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Catena.Capacity.DeAllocateServerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Capacity.DeAllocateServerResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions": {
      "get": {
        "tags": [
          "CatenaSessions"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaSessions.ListSessionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions/healthz": {
      "get": {
        "tags": [
          "CatenaSessions"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Core.GetServiceHealthResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/generate_presigned_url": {
      "post": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "GeneratePresignedUrl Generates a presigned S3 URL for a given object key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.GeneratePresignedUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.GeneratePresignedUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/generate_presigned_url_from_uri": {
      "post": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "GeneratePresignedUrlFromUri Generates a presigned URL for a given URL",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.GeneratePresignedUrlFromUriRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.GeneratePresignedUrlFromUriResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/titles": {
      "get": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "GetTitles Returns a list of game titles that are supported via this instance of Catena",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.GetTitlesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/titles/{titleId}/manifest": {
      "get": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "GetTitleManifest Returns a manifest for releases and patches that are required to play the game",
        "parameters": [
          {
            "name": "titleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.GetTitleManifestResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/create": {
      "post": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminCreateTitle Creates a game title",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminCreateTitleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminCreateTitleResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/update": {
      "put": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminUpdateTitle Updates a game title",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminUpdateTitleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminUpdateTitleResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/delete": {
      "delete": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminDeleteTitle Deletes a game title",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminDeleteTitleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminDeleteTitleResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/create_title_release": {
      "post": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminCreateTitleRelease Creates a game title release",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminCreateTitleReleaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminCreateTitleReleaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/update_title_release": {
      "put": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminUpdateTitleRelease Updates a game title release",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminUpdateTitleReleaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminUpdateTitleReleaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/titles/delete_title_release": {
      "delete": {
        "tags": [
          "CatenaTitles"
        ],
        "summary": "AdminDeleteTitleRelease Deletes a game title release",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Services.CatenaTitles.AdminDeleteTitleReleaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services.CatenaTitles.AdminDeleteTitleReleaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/subscribe": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "SubscribeToEvents",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Events.SubscribeToEventsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/emit": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "EmitUpdateEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Catena.Events.EmitUpdateEventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catena.Events.EmitUpdateEventResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Rpc.Status"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Catena.Capacity.AllocateServerRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "a generic string to associate allocation requests with eachother"
          },
          "profileId": {
            "type": "string",
            "description": "the id of the profile to launch"
          },
          "matchId": {
            "type": "string",
            "description": "The ID of the match to be assigned to this server"
          },
          "matchData": {
            "$ref": "#/components/schemas/Catena.Groups.Entity"
          }
        },
        "additionalProperties": false
      },
      "Catena.Capacity.AllocateServerResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Catena.Capacity.AllocateServerStatus"
          },
          "message": {
            "type": "string"
          },
          "connectionInfo": {
            "$ref": "#/components/schemas/Catena.Capacity.ServerConnectionInfo"
          }
        },
        "additionalProperties": false
      },
      "Catena.Capacity.AllocateServerStatus": {
        "enum": [
          "ALLOCATE_SERVER_STATUS_UNSPECIFIED",
          "ALLOCATE_SERVER_STATUS_SUCCESS",
          "ALLOCATE_SERVER_STATUS_FAILURE",
          "ALLOCATE_SERVER_STATUS_PENDING"
        ],
        "type": "string"
      },
      "Catena.Capacity.DeAllocateServerRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "Catena.Capacity.DeAllocateServerResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Catena.Capacity.ServerConnectionInfo": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "serverId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Catena.Core.GetServiceHealthResponse": {
        "type": "object",
        "properties": {
          "healthy": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Catena.Events.EmitUpdateEventRequest": {
        "type": "object",
        "properties": {
          "nestedEvent": {
            "$ref": "#/components/schemas/Catena.Events.Event"
          },
          "recipientIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Catena.Events.EmitUpdateEventResponse": {
        "type": "object",
        "properties": {
          "broadcastSuccess": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Catena.Events.EmptyEvent": {
        "type": "object",
        "additionalProperties": false,
        "description": "EmptyEvent is used to send pings through the event service, eg to get around bugs where a stream is not opened until the first request comes through, or to do a heartbeat"
      },
      "Catena.Events.Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "recipientId": {
            "type": "string"
          },
          "anyEvent": {
            "$ref": "#/components/schemas/Google.Protobuf.WellKnownTypes.Any"
          },
          "partyUpdateEvent": {
            "$ref": "#/components/schemas/Services.CatenaParties.PartyUpdateEvent"
          },
          "matchmakingStatusUpdateEvent": {
            "$ref": "#/components/schemas/Services.CatenaMatchmaking.MatchmakingStatusUpdateEvent"
          },
          "emptyEvent": {
            "$ref": "#/components/schemas/Catena.Events.EmptyEvent"
          },
          "authenticationEvent": {
            "$ref": "#/components/schemas/Services.CatenaAuthentication.AuthenticationEvent"
          }
        },
        "additionalProperties": false
      },
      "Catena.Events.SubscribeToEventsResponse": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/Catena.Events.Event"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.CreateMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entryKey": {
            "type": "string",
            "description": "The key in the metadata to be added"
          },
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.CreateMetadataEntryResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Catena.Groups.DeleteJsonMetadataType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "If you are deleting a json, can choose whether to delete the entire entry or a partial part of an entry\r\nCurrently, only whole property removal is supported.\r\nRemoval of elements in a json array (e.g. trying to remove \"value\" from json {\"array\":[\"value\",\"value2\"]})\r\nis not currently supported by DeleteMetadataEntryRequest.",
        "format": "int32"
      },
      "Catena.Groups.DeleteMetadataEntryResponse": {
        "type": "object",
        "properties": {
          "entryDeleted": {
            "type": "boolean",
            "description": "If the entry was found in the database and deleted"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "entityType": {
            "$ref": "#/components/schemas/Catena.Groups.EntityType"
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Catena.Groups.Entity"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false,
        "description": "We rely on the entity type for storing data about a user in the session token, this is crucial to enable"
      },
      "Catena.Groups.EntityMetadata": {
        "type": "object",
        "properties": {
          "stringPayload": {
            "type": "string"
          },
          "intPayload": {
            "type": "integer",
            "format": "int64"
          },
          "jsonPayload": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.EntityType": {
        "enum": [
          "ENTITY_TYPE_UNSPECIFIED",
          "ENTITY_TYPE_GENERIC",
          "ENTITY_TYPE_ACCOUNT",
          "ENTITY_TYPE_GROUP",
          "ENTITY_TYPE_MATCH"
        ],
        "type": "string",
        "description": "Entities"
      },
      "Catena.Groups.GetMetadataEntriesResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.GetMetadataEntryResponse": {
        "type": "object",
        "properties": {
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.MetadataEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Simple message containing a metadata key-value pair so that a metadata entry can be sent in update events"
      },
      "Catena.Groups.MetadataMap": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false,
        "description": "Simple message containing a metadata map so that metadata entries can be sent in update events (maps are by default not supported in oneof)"
      },
      "Catena.Groups.UpdateMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entryKey": {
            "type": "string",
            "description": "The key in the metadata whose entry needs to be changed"
          },
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          },
          "updateOperationType": {
            "$ref": "#/components/schemas/Catena.Groups.UpdateMetadataOperationType"
          }
        },
        "additionalProperties": false
      },
      "Catena.Groups.UpdateMetadataEntryResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Catena.Groups.UpdateMetadataOperationType": {
        "enum": [
          "OVERWRITE",
          "APPEND"
        ],
        "type": "string",
        "description": "When updating a metadata entry, the entry can either be overwritten (supported by all types) or appended (supported by string and json)"
      },
      "Google.Protobuf.WellKnownTypes.Any": {
        "required": [
          "@type"
        ],
        "type": "object",
        "properties": {
          "@type": {
            "type": "string"
          }
        },
        "additionalProperties": { }
      },
      "Google.Rpc.Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Google.Protobuf.WellKnownTypes.Any"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "GUID for this account"
          },
          "displayName": {
            "type": "string",
            "description": "display name for this account"
          },
          "authRole": {
            "type": "string",
            "description": "The auth level of the account"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            },
            "description": "Metadata associated with the account"
          },
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.PublicCommon.Provider"
            },
            "description": "List of providers that this account is linked to"
          }
        },
        "additionalProperties": false,
        "description": "Bundled data that describes an account and its metadata."
      },
      "Services.CatenaAccounts.CreateAccountRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.CreateAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Services.CatenaAccounts.Account"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.CreateMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "entryKey": {
            "type": "string"
          },
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.CreateMetadataEntryResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAccounts.CreateOrGetAccountFromTokenRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAccounts.CreateOrGetAccountFromTokenResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Services.CatenaAccounts.Account"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.DeleteAccountRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.DeleteAccountResponse": {
        "type": "object",
        "properties": {
          "accountDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.DeleteMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "entryKey": {
            "type": "string"
          },
          "jsonHandlingType": {
            "$ref": "#/components/schemas/Catena.Groups.DeleteJsonMetadataType"
          },
          "propertiesToRemovePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.DeleteMetadataEntryResponse": {
        "type": "object",
        "properties": {
          "entryDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.GetAccountByIdResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Services.CatenaAccounts.Account"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.GetMetadataEntriesResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.GetMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "entryKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.GetMetadataEntryResponse": {
        "type": "object",
        "properties": {
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.LinkAccountToProviderRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "The session id to link into the currently logged in session id"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.LinkAccountToProviderResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Services.CatenaAccounts.Account"
          },
          "accountLinked": {
            "type": "boolean",
            "description": "indicator of success of linking existing account to new auth provider"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.UpdateAccountRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The id of the account to update"
          },
          "account": {
            "$ref": "#/components/schemas/Services.CatenaAccounts.Account"
          },
          "accountMask": {
            "type": "string"
          },
          "metadataDeletionKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of metadata keys to delete"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.UpdateAccountResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAccounts.UpdateMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "entryKey": {
            "type": "string"
          },
          "entryValue": {
            "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
          },
          "updateOperationType": {
            "$ref": "#/components/schemas/Catena.Groups.UpdateMetadataOperationType"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAccounts.UpdateMetadataEntryResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AdminAddOrUpdateProviderConfigRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Services.PublicCommon.Provider"
          },
          "providerConfig": {
            "$ref": "#/components/schemas/Services.PublicCommon.ProviderConfig"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AdminAddOrUpdateProviderConfigResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AdminGetProviderConfigResponse": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Services.PublicCommon.Provider"
          },
          "providerConfig": {
            "$ref": "#/components/schemas/Services.PublicCommon.ProviderConfig"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AdminToggleProviderRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Services.PublicCommon.Provider"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AdminToggleProviderResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AuthenticationEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Services.CatenaAuthentication.AuthenticationUpdateType"
          },
          "accountId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.AuthenticationUpdateType": {
        "enum": [
          "LOGOUT"
        ],
        "type": "string"
      },
      "Services.CatenaAuthentication.AwaitSessionResponse": {
        "type": "object",
        "properties": {
          "successfulAuth": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.GetEnabledProvidersResponse": {
        "type": "object",
        "properties": {
          "enabledProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.PublicCommon.Provider"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.LoginWithProviderRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/Services.PublicCommon.Provider"
          },
          "payload": {
            "type": "string",
            "description": "provider-specific auth token (username for unsafe provider)"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.LoginWithProviderResponse": {
        "type": "object",
        "properties": {
          "redirectUri": {
            "type": "string",
            "description": "redirect URI to send the user to if we are dealing with an oauth provider"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaAuthentication.LogoutResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.AdminCreateEntitlementRequest": {
        "type": "object",
        "properties": {
          "entitlementName": {
            "type": "string"
          },
          "entitlementDescription": {
            "type": "string"
          },
          "entitlementGrantingPurchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaEntitlements.EntitlementGrantingPurchase"
            }
          }
        },
        "additionalProperties": false,
        "description": "admin functionality"
      },
      "Services.CatenaEntitlements.AdminCreateEntitlementResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.AdminDeleteAndRevokeEntitlementResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.AdminGetEntitlementsResponse": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaEntitlements.Entitlement"
            }
          }
        },
        "additionalProperties": false,
        "description": "shared between both GET RPCs"
      },
      "Services.CatenaEntitlements.AdminUpdateEntitlementRequest": {
        "type": "object",
        "properties": {
          "entitlement": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.Entitlement"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.AdminUpdateEntitlementResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.CreateIAPStorePurchaseRequest": {
        "type": "object",
        "properties": {
          "iapStore": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.IAPStore"
          },
          "stripePurchaseRequestData": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.StripePurchaseRequestData"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.CreateIAPStorePurchaseResponse": {
        "type": "object",
        "properties": {
          "iapStore": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.IAPStore"
          },
          "stripePurchaseResponseData": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.StripePurchaseResponseData"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.Entitlement": {
        "type": "object",
        "properties": {
          "entitlementId": {
            "type": "string",
            "description": "GUID"
          },
          "entitlementName": {
            "type": "string"
          },
          "entitlementDescription": {
            "type": "string"
          },
          "entitlementGrantingPurchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaEntitlements.EntitlementGrantingPurchase"
            },
            "description": "references to IAP store purchases that grant this entitlement"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.EntitlementGrantingPurchase": {
        "type": "object",
        "properties": {
          "entitlementGrantingPurchaseId": {
            "type": "string"
          },
          "externalProductId": {
            "type": "string"
          },
          "iapStore": {
            "$ref": "#/components/schemas/Services.CatenaEntitlements.IAPStore"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaEntitlements.IAPStore": {
        "enum": [
          "IAP_STORE_UNSPECIFIED",
          "IAP_STORE_STRIPE"
        ],
        "type": "string",
        "description": "supported In-App Purchase (IAP) stores"
      },
      "Services.CatenaEntitlements.StripePurchaseRequestData": {
        "type": "object",
        "properties": {
          "priceId": {
            "type": "string",
            "description": "Stripe-generated unique ID of the pricing plan for the product being purchased"
          }
        },
        "additionalProperties": false,
        "description": "user functionality"
      },
      "Services.CatenaEntitlements.StripePurchaseResponseData": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "used for browser checkout session"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.CancelMatchmakingRequest": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "The ID of the ticket for which we are cancelling matchmaking."
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.CancelMatchmakingResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.GetMatchmakingStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Services.CatenaMatchmaking.MatchmakingStatus"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.MatchmakingStatus": {
        "enum": [
          "MATCHMAKING_STATUS_UNSPECIFIED",
          "MATCHMAKING_STATUS_IN_PROGRESS",
          "MATCHMAKING_STATUS_COMPLETED",
          "MATCHMAKING_STATUS_CANCELLED",
          "MATCHMAKING_STATUS_FAILED",
          "MATCHMAKING_STATUS_FINDING_SERVER"
        ],
        "type": "string"
      },
      "Services.CatenaMatchmaking.MatchmakingStatusUpdateEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Services.CatenaMatchmaking.MatchmakingStatusUpdateType"
          },
          "message": {
            "type": "string"
          },
          "ticketId": {
            "type": "string"
          },
          "serverConnectionInfo": {
            "$ref": "#/components/schemas/Catena.Capacity.ServerConnectionInfo"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.MatchmakingStatusUpdateType": {
        "enum": [
          "MATCHMAKING_STATUS_UPDATE_TYPE_UNSPECIFIED",
          "MATCHMAKING_STATUS_UPDATE_TYPE_IN_PROGRESS",
          "MATCHMAKING_STATUS_UPDATE_TYPE_COMPLETED",
          "MATCHMAKING_STATUS_UPDATE_TYPE_FAILED",
          "MATCHMAKING_STATUS_UPDATE_TYPE_CANCELLED",
          "MATCHMAKING_STATUS_UPDATE_TYPE_FINDING_SERVER"
        ],
        "type": "string"
      },
      "Services.CatenaMatchmaking.StartMatchmakingRequest": {
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/Catena.Groups.Entity"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaMatchmaking.StartMatchmakingResponse": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "The ID of the newly created matchmaking ticket."
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.CreatePartyMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "innerRequest": {
            "$ref": "#/components/schemas/Catena.Groups.CreateMetadataEntryRequest"
          },
          "playerId": {
            "type": "string",
            "description": "Optional: If included, query for a specific party member"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.CreatePartyRequest": {
        "type": "object",
        "properties": {
          "creatingPlayerMetadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.CreatePartyResponse": {
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Services.CatenaParties.Party"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.GetPartyInfoResponse": {
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Services.CatenaParties.Party"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.GetPlayerInfoByIdResponse": {
        "type": "object",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/Services.CatenaParties.Player"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.JoinPartyWithInviteCodeRequest": {
        "type": "object",
        "properties": {
          "inviteCode": {
            "type": "string",
            "description": "code used to join the party"
          },
          "joiningPlayerMetadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.JoinPartyWithInviteCodeResponse": {
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Services.CatenaParties.Party"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.KickFromPartyRequest": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "description": "ID of player to kick from party"
          },
          "partyId": {
            "type": "string",
            "description": "ID of party to kick player from"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.KickFromPartyResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaParties.LeavePartyRequest": {
        "type": "object",
        "properties": {
          "partyId": {
            "type": "string",
            "description": "ID of party to leave"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.LeavePartyResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaParties.Party": {
        "type": "object",
        "properties": {
          "partyId": {
            "type": "string"
          },
          "leaderId": {
            "type": "string"
          },
          "inviteCode": {
            "type": "string"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaParties.Player"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.PartyEventValue": {
        "type": "object",
        "properties": {
          "boolValue": {
            "type": "boolean"
          },
          "metadataValue": {
            "$ref": "#/components/schemas/Catena.Groups.MetadataEntry"
          },
          "stringValue": {
            "type": "string"
          },
          "playerValue": {
            "$ref": "#/components/schemas/Services.CatenaParties.Player"
          },
          "intValue": {
            "type": "integer",
            "format": "int32"
          },
          "metadataMapValue": {
            "$ref": "#/components/schemas/Catena.Groups.MetadataMap"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.PartyUpdateEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Services.CatenaParties.PartyUpdateType"
          },
          "message": {
            "type": "string"
          },
          "partyId": {
            "type": "string",
            "description": "The party id this event is associated with"
          },
          "eventPayload": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Services.CatenaParties.PartyEventValue"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.PartyUpdateType": {
        "enum": [
          "PARTY_UPDATE_TYPE_UNSPECIFIED",
          "PARTY_UPDATE_TYPE_PLAYER_JOINED",
          "PARTY_UPDATE_TYPE_PLAYER_LEFT",
          "PARTY_UPDATE_TYPE_PLAYER_KICKED",
          "PARTY_UPDATE_TYPE_PLAYER_READY_CHANGED",
          "PARTY_UPDATE_TYPE_PLAYER_LEADER_CHANGED",
          "PARTY_UPDATE_TYPE_METADATA_CREATED",
          "PARTY_UPDATE_TYPE_METADATA_UPDATED",
          "PARTY_UPDATE_TYPE_METADATA_DELETED"
        ],
        "type": "string"
      },
      "Services.CatenaParties.Player": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isReady": {
            "type": "boolean"
          },
          "isLeader": {
            "type": "boolean"
          },
          "teamNumber": {
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Catena.Groups.EntityMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.SetPartyLeaderRequest": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "description": "ID of player to set as party leader"
          },
          "partyId": {
            "type": "string",
            "description": "ID of party to set leader of"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.SetPartyLeaderResponse": {
        "type": "object",
        "additionalProperties": false
      },
      "Services.CatenaParties.UpdatePartyMetadataEntryRequest": {
        "type": "object",
        "properties": {
          "innerRequest": {
            "$ref": "#/components/schemas/Catena.Groups.UpdateMetadataEntryRequest"
          },
          "playerId": {
            "type": "string",
            "description": "Optional: If included, query for a specific party member"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.UpdatePartyPlayerRequest": {
        "type": "object",
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/Services.CatenaParties.Player"
          },
          "payloadMask": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaParties.UpdatePartyPlayerResponse": {
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Services.CatenaParties.Party"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaSessions.ListSessionsResponse": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Services.CatenaSessions.Session"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaSessions.Session": {
        "type": "object",
        "properties": {
          "sessionData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminCreateTitleReleaseRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "game title id"
          },
          "uri": {
            "type": "string"
          },
          "bytes": {
            "type": "integer",
            "description": "subject to change: possibly protobuf.bytes type  / cant use long, have to use int64 in .proto files",
            "format": "int64"
          },
          "checksum": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          },
          "checksumAlg": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminCreateTitleReleaseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "release id"
          },
          "name": {
            "type": "string",
            "description": "name of title"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminCreateTitleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminCreateTitleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminDeleteTitleReleaseRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "release id"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminDeleteTitleReleaseResponse": {
        "type": "object",
        "properties": {
          "titleDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminDeleteTitleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminDeleteTitleResponse": {
        "type": "object",
        "properties": {
          "titleDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminUpdateTitleReleaseRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "game title release id"
          },
          "gameTitleId": {
            "type": "string",
            "description": "game title id"
          },
          "uri": {
            "type": "string"
          },
          "bytes": {
            "type": "integer",
            "format": "int64"
          },
          "checksum": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          },
          "checksumAlg": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminUpdateTitleReleaseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "game title release id"
          },
          "name": {
            "type": "string",
            "description": "game title name"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminUpdateTitleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.AdminUpdateTitleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GameTitle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GeneratePresignedUrlFromUriRequest": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GeneratePresignedUrlFromUriResponse": {
        "type": "object",
        "properties": {
          "presignedHeadUrl": {
            "type": "string"
          },
          "presignedGetUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GeneratePresignedUrlRequest": {
        "type": "object",
        "properties": {
          "objectKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GeneratePresignedUrlResponse": {
        "type": "object",
        "properties": {
          "presignedHeadUrl": {
            "type": "string"
          },
          "presignedGetUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GetTitleManifestResponse": {
        "type": "object",
        "properties": {
          "titleName": {
            "type": "string"
          },
          "releases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaTitles.TitleRelease"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.GetTitlesResponse": {
        "type": "object",
        "properties": {
          "titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaTitles.GameTitle"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.TitlePatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "bytes": {
            "type": "integer",
            "format": "int64"
          },
          "checksum": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          },
          "checksumAlg": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          }
        },
        "additionalProperties": false
      },
      "Services.CatenaTitles.TitleRelease": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "bytes": {
            "type": "integer",
            "format": "int64"
          },
          "checksum": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          },
          "checksumAlg": {
            "type": "string",
            "description": "StringValue allows for a field to be nullable"
          },
          "patches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services.CatenaTitles.TitlePatch"
            }
          }
        },
        "additionalProperties": false
      },
      "Services.PublicCommon.Provider": {
        "enum": [
          "PROVIDER_UNSPECIFIED",
          "PROVIDER_UNSAFE",
          "PROVIDER_DISCORD",
          "PROVIDER_GOOGLE",
          "PROVIDER_APPLE",
          "PROVIDER_TWITCH"
        ],
        "type": "string",
        "description": "Accepted auth providers."
      },
      "Services.PublicCommon.ProviderConfig": {
        "type": "object",
        "properties": {
          "providerClientId": {
            "type": "string"
          },
          "providerClientSecret": {
            "type": "string"
          },
          "providerRedirectUri": {
            "type": "string"
          },
          "providerIsEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Accepted auth provider configs."
      }
    }
  },
  "tags": [
    {
      "name": "CatenaAuthentication",
      "description": "CatenaAuthentication"
    },
    {
      "name": "CatenaAccounts",
      "description": "CatenaAccounts"
    },
    {
      "name": "CatenaParties",
      "description": "CatenaParties"
    },
    {
      "name": "CatenaMatchmaking",
      "description": "CatenaMatchmaking"
    },
    {
      "name": "CatenaServerCapacity",
      "description": "*\r\nThe CatenaServerCapacity is responsible for allocating a server using the defined allocation plugin. It also provides a place to add some\r\nalgorithmic capacity management down the line."
    },
    {
      "name": "CatenaTitles",
      "description": "CatenaTitles"
    },
    {
      "name": "CatenaSessions",
      "description": "A service that can be used to probe the session store directly for development or diagnostics.\r\nNot intended for regular production use!"
    },
    {
      "name": "Events",
      "description": "Events"
    }
  ]
}