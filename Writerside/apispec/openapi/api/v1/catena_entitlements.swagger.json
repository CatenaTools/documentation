{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/catena_entitlements.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CatenaEntitlements"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/entitlements": {
      "get": {
        "summary": "AdminGetAllEntitlements Fetches all existing entitlements in our system.",
        "operationId": "CatenaEntitlements_AdminGetAllEntitlements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminGetEntitlementsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CatenaEntitlements"
        ]
      },
      "post": {
        "summary": "AdminCreateEntitlement Creates a new entitlement in our system with the specified information.",
        "operationId": "CatenaEntitlements_AdminCreateEntitlement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminCreateEntitlementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminCreateEntitlementRequest"
            }
          }
        ],
        "tags": [
          "CatenaEntitlements"
        ]
      },
      "put": {
        "summary": "AdminUpdtateEntitlement Updates the name, description, and/or the entitlement granting purchases of an existing entitlement.",
        "operationId": "CatenaEntitlements_AdminUpdateEntitlement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminUpdateEntitlementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminUpdateEntitlementRequest"
            }
          }
        ],
        "tags": [
          "CatenaEntitlements"
        ]
      }
    },
    "/api/v1/entitlements/purchase": {
      "post": {
        "summary": "Allows an account to purchase a product from a supported IAP store.\nThis purchase can either be a one-time purchase that the account is billed for once\nor a subscription purchase that the account is billed for on a recurring basis.",
        "operationId": "CatenaEntitlements_CreateIAPStorePurchase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsCreateIAPStorePurchaseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_entitlementsCreateIAPStorePurchaseRequest"
            }
          }
        ],
        "tags": [
          "CatenaEntitlements"
        ]
      }
    },
    "/api/v1/entitlements/{approxEntitlementName}": {
      "get": {
        "summary": "AdminGetEntitlementsByApproxName Fetches all entitlements whose name contains the specified keyword or a single entitlement if an exact name is provided. \nThis should only be called when an admin clicks a search button so we are not \nmaking a request with each character typed into a search bar.",
        "operationId": "CatenaEntitlements_AdminGetEntitlementsByApproxName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminGetEntitlementsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "approxEntitlementName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CatenaEntitlements"
        ]
      }
    },
    "/api/v1/entitlements/{entitlementId}": {
      "delete": {
        "summary": "AdminDeleteEntitlement Deletes the specified entitlement from our system and revokes it from all users to whom it has previously been granted.",
        "operationId": "CatenaEntitlements_AdminDeleteAndRevokeEntitlement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_entitlementsAdminDeleteAndRevokeEntitlementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CatenaEntitlements"
        ]
      }
    }
  },
  "definitions": {
    "catena_entitlementsAdminCreateEntitlementRequest": {
      "type": "object",
      "properties": {
        "entitlementName": {
          "type": "string"
        },
        "entitlementDescription": {
          "type": "string"
        },
        "entitlementGrantingPurchases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_entitlementsEntitlementGrantingPurchase"
          }
        }
      },
      "title": "admin functionality"
    },
    "catena_entitlementsAdminCreateEntitlementResponse": {
      "type": "object"
    },
    "catena_entitlementsAdminDeleteAndRevokeEntitlementResponse": {
      "type": "object"
    },
    "catena_entitlementsAdminGetEntitlementsResponse": {
      "type": "object",
      "properties": {
        "entitlements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_entitlementsEntitlement"
          }
        }
      },
      "title": "shared between both GET RPCs"
    },
    "catena_entitlementsAdminUpdateEntitlementRequest": {
      "type": "object",
      "properties": {
        "entitlement": {
          "$ref": "#/definitions/catena_entitlementsEntitlement",
          "title": "need an entitlement_id unlike AdminCreateEntitlementRequest"
        }
      }
    },
    "catena_entitlementsAdminUpdateEntitlementResponse": {
      "type": "object"
    },
    "catena_entitlementsCreateIAPStorePurchaseRequest": {
      "type": "object",
      "properties": {
        "iapStore": {
          "$ref": "#/definitions/catena_entitlementsIAPStore"
        },
        "stripePurchaseRequestData": {
          "$ref": "#/definitions/catena_entitlementsStripePurchaseRequestData"
        }
      }
    },
    "catena_entitlementsCreateIAPStorePurchaseResponse": {
      "type": "object",
      "properties": {
        "iapStore": {
          "$ref": "#/definitions/catena_entitlementsIAPStore"
        },
        "stripePurchaseResponseData": {
          "$ref": "#/definitions/catena_entitlementsStripePurchaseResponseData"
        }
      }
    },
    "catena_entitlementsEntitlement": {
      "type": "object",
      "properties": {
        "entitlementId": {
          "type": "string",
          "title": "GUID"
        },
        "entitlementName": {
          "type": "string"
        },
        "entitlementDescription": {
          "type": "string"
        },
        "entitlementGrantingPurchases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_entitlementsEntitlementGrantingPurchase"
          },
          "title": "references to IAP store purchases that grant this entitlement"
        }
      }
    },
    "catena_entitlementsEntitlementGrantingPurchase": {
      "type": "object",
      "properties": {
        "entitlementGrantingPurchaseId": {
          "type": "string"
        },
        "externalProductId": {
          "type": "string"
        },
        "iapStore": {
          "$ref": "#/definitions/catena_entitlementsIAPStore"
        }
      }
    },
    "catena_entitlementsIAPStore": {
      "type": "string",
      "enum": [
        "IAP_STORE_UNSPECIFIED",
        "IAP_STORE_STRIPE"
      ],
      "default": "IAP_STORE_UNSPECIFIED",
      "title": "supported In-App Purchase (IAP) stores"
    },
    "catena_entitlementsStripePurchaseRequestData": {
      "type": "object",
      "properties": {
        "priceId": {
          "type": "string",
          "title": "Stripe-generated unique ID of the pricing plan for the product being purchased"
        }
      },
      "title": "user functionality"
    },
    "catena_entitlementsStripePurchaseResponseData": {
      "type": "object",
      "properties": {
        "clientSecret": {
          "type": "string",
          "title": "used for browser checkout session"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
