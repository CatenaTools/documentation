{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/catena_server_manager.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CatenaServerManager"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/server/allocate": {
      "post": {
        "operationId": "CatenaServerManager_AdminAllocateServer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerAdminAllocateServerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerAdminAllocateServerRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    },
    "/api/v1/server/deallocate": {
      "post": {
        "operationId": "CatenaServerManager_AdminDeallocateServer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerAdminDeallocateServerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerAdminDeallocateServerRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    },
    "/api/v1/server/end_match": {
      "post": {
        "operationId": "CatenaServerManager_EndMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerEndMatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerEndMatchRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    },
    "/api/v1/server/match_ready": {
      "post": {
        "operationId": "CatenaServerManager_MatchReady",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerMatchReadyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerMatchReadyRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    },
    "/api/v1/server/request_match": {
      "post": {
        "operationId": "CatenaServerManager_RequestMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerRequestMatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerRequestMatchRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    },
    "/api/v1/servers": {
      "post": {
        "operationId": "CatenaServerManager_ListServers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/catena_server_managerListServersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/catena_server_managerListServersRequest"
            }
          }
        ],
        "tags": [
          "CatenaServerManager"
        ]
      }
    }
  },
  "definitions": {
    "catena_server_managerAdminAllocateServerRequest": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/match_brokerMatch"
        }
      }
    },
    "catena_server_managerAdminAllocateServerResponse": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        }
      }
    },
    "catena_server_managerAdminDeallocateServerRequest": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        }
      }
    },
    "catena_server_managerAdminDeallocateServerResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/catena_server_managerServerState"
        },
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_server_managerServerMatchInfo"
          }
        }
      }
    },
    "catena_server_managerEndMatchRequest": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "matchId": {
          "type": "string"
        },
        "hintFlags": {
          "$ref": "#/definitions/catena_server_managerHintFlag"
        }
      }
    },
    "catena_server_managerEndMatchResponse": {
      "type": "object",
      "properties": {
        "matchId": {
          "type": "string"
        },
        "hintFlags": {
          "$ref": "#/definitions/catena_server_managerHintFlag"
        }
      }
    },
    "catena_server_managerHintFlag": {
      "type": "string",
      "enum": [
        "HINT_FLAG_NO_HINT_FLAGS",
        "HINT_FLAG_SHUTDOWN",
        "HINT_FLAG_WILLING_TO_WAIT",
        "HINT_FLAG_WILLING_TO_SHUTDOWN",
        "HINT_FLAG_FULL",
        "HINT_FLAG_NOT_FULL"
      ],
      "default": "HINT_FLAG_NO_HINT_FLAGS",
      "description": "- HINT_FLAG_NO_HINT_FLAGS: No flags - either unspecified or empty\n - HINT_FLAG_SHUTDOWN: Flag indicating a component will shutdown or should shut down if it can\n - HINT_FLAG_WILLING_TO_WAIT: Flag indicating a component is willing to wait a \"long time\" for a response to the request.\n - HINT_FLAG_WILLING_TO_SHUTDOWN: Flag indicating a component is willing to shutdown if a shutdown is requested\n - HINT_FLAG_FULL: Flag indicating a component will cease making requests for additional matches\n - HINT_FLAG_NOT_FULL: Flag indicating a component will begin making requests for additional matches",
      "title": "Optional flags hinting intention by requester/responder\nThese are bit flags - values must be powers of 2!"
    },
    "catena_server_managerListServersRequest": {
      "type": "object"
    },
    "catena_server_managerListServersResponse": {
      "type": "object",
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_server_managerServerInfo"
          }
        }
      }
    },
    "catena_server_managerMatchReadyRequest": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "matchId": {
          "type": "string"
        },
        "connectionDetails": {
          "type": "string",
          "title": "URI, IP+port, etc - not prescribed"
        },
        "hintFlags": {
          "$ref": "#/definitions/catena_server_managerHintFlag"
        }
      }
    },
    "catena_server_managerMatchReadyResponse": {
      "type": "object",
      "properties": {
        "matchId": {
          "type": "string",
          "title": "TODO: anything the server needs to know from the backend - proceed with match? (what if a client can't get the ready event?)"
        },
        "hintFlags": {
          "$ref": "#/definitions/catena_server_managerHintFlag"
        }
      }
    },
    "catena_server_managerRequestMatchRequest": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "requirements": {
          "type": "string",
          "title": "TODO: define filtering rules that can be applied"
        }
      }
    },
    "catena_server_managerRequestMatchResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/match_brokerMatch"
        }
      }
    },
    "catena_server_managerServerInfo": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "requestedMatch": {
          "type": "boolean",
          "title": "TODO: replace with \"healthy\"? what does the server manager consider healthy? is it ongoing?"
        },
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/catena_server_managerServerMatchInfo"
          },
          "title": "These are connection strings the server has returned"
        },
        "IsFull": {
          "type": "boolean"
        }
      }
    },
    "catena_server_managerServerMatchInfo": {
      "type": "object",
      "properties": {
        "matchId": {
          "type": "string"
        },
        "connectionString": {
          "type": "string"
        }
      }
    },
    "catena_server_managerServerState": {
      "type": "string",
      "enum": [
        "SERVER_STATE_UNSPECIFIED",
        "SERVER_STATE_PENDING",
        "SERVER_STATE_AVAILABLE",
        "SERVER_STATE_FULL"
      ],
      "default": "SERVER_STATE_UNSPECIFIED",
      "title": "The server state as in its capability to request matches\nNote: This is intentionally a subset of the specific states that exist inside the Catena Match Broker"
    },
    "match_brokerMatch": {
      "type": "object",
      "properties": {
        "matchId": {
          "type": "string"
        },
        "playerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TODO: other required match properties and custom data passing fields"
        },
        "matchProperties": {
          "type": "string",
          "title": "A JSON object that contains all the custom match properties\nMay be empty"
        },
        "playerProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "A JSON object per-player where the map key is a player_id in the player_ids field\nMay contain values for none, some, or all players"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
